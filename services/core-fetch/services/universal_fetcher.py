import logging
from sqlalchemy import delete, update
from sqlalchemy.sql import func
from core_fetch.db.models import ExchangeSymbol, Exchange, ExchangeLimit, ExchangeStatusHistory,
from core_fetch.db.session import SessionLocal

async def refresh_symbols(client, exchange_id):
    logging.info(f"üîÑ [START] refresh_symbols for {client['exchange_code']}")

    symbols = []

    # ---- Binance ----
    if client["exchange_code"] == "BINANCE":
        url = "/api/v3/exchangeInfo"
        logging.debug(f"üì° –ó–∞–ø–∏—Ç –¥–æ {client['exchange_code']} {url}")
        resp = await client["http"].get(url)
        logging.debug(f"üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å {client['exchange_code']} —Å—Ç–∞—Ç—É—Å={resp.status_code}")
        data = resp.json()

        logging.debug(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ {len(data.get('symbols', []))} symbols –≤—ñ–¥ {client['exchange_code']}")

        for s in data.get("symbols", []):
            if s["status"] != "TRADING":
                logging.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {s['symbol']} (status={s['status']})")
                continue

            filters = {f["filterType"]: f for f in s.get("filters", [])}

            symbols.append(dict(
                exchange_id=exchange_id,
                symbol=s["symbol"],
                base_asset=s["baseAsset"],
                quote_asset=s["quoteAsset"],
                status=s["status"],
                base_precision=s.get("baseAssetPrecision"),
                quote_precision=s.get("quotePrecision"),
                step_size=filters.get("LOT_SIZE", {}).get("stepSize"),
                tick_size=filters.get("PRICE_FILTER", {}).get("tickSize"),
                min_qty=filters.get("LOT_SIZE", {}).get("minQty"),
                max_qty=filters.get("LOT_SIZE", {}).get("maxQty"),
                min_notional=filters.get("MIN_NOTIONAL", {}).get("minNotional"),
                filters=s.get("filters", []),
            ))

    # ---- Kraken ----
    elif client["exchange_code"] == "KRAKEN":
        url = "/0/public/AssetPairs"
        logging.debug(f"üì° –ó–∞–ø–∏—Ç –¥–æ {client['exchange_code']} {url}")
        resp = await client["http"].get(url)
        logging.debug(f"üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å {client['exchange_code']} —Å—Ç–∞—Ç—É—Å={resp.status_code}")
        data = resp.json()

        logging.debug(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ {len(data.get('result', {}))} symbols –≤—ñ–¥ {client['exchange_code']}")

        for key, s in data.get("result", {}).items():
            base = s.get("base")
            quote = s.get("quote")
            symbols.append(dict(
                exchange_id=exchange_id,
                symbol=key,
                base_asset=base,
                quote_asset=quote,
                status="TRADING",
                base_precision=s.get("pair_decimals"),
                quote_precision=s.get("lot_decimals"),
                step_size=None,
                tick_size=None,
                min_qty=None,
                max_qty=None,
                min_notional=None,
                filters=s,
            ))

    else:
        logging.warning(f"‚ùå refresh_symbols –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è {client['exchange_code']}")
        return

    logging.info(f"üìù –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(symbols)} symbols –¥–ª—è {client['exchange_code']} (exchange_id={exchange_id})")

    # ---- –ó–∞–ø–∏—Å —É –±–∞–∑—É ----
    async with SessionLocal() as session:
        logging.debug(f"üóëÔ∏è –í–∏–¥–∞–ª—è—é —Å—Ç–∞—Ä—ñ symbols –¥–ª—è exchange_id={exchange_id}")
        await session.execute(
            delete(ExchangeSymbol).where(ExchangeSymbol.exchange_id == exchange_id)
        )

        logging.debug(f"‚ûï –î–æ–¥–∞—é {len(symbols)} –Ω–æ–≤–∏—Ö symbols —É exchange_symbols")
        session.add_all([ExchangeSymbol(**sym) for sym in symbols])
        await session.commit()

        await session.execute(
            update(Exchange)
            .where(Exchange.id == exchange_id)
            .values(last_symbols_refresh_at=func.now())
        )
    logging.info(f"‚úÖ [DONE] {len(symbols)} symbols –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è {client['exchange_code']}")

# ---------------------------
# refresh_filters
# ---------------------------
async def refresh_filters(client, exchange_id):
    logging.info(f"üîÑ [START] refresh_filters for {client['exchange_code']}")

    try:
        # TODO: –≤–∏—Ç—è–≥—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ filters –∑ API
        filters_data = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –ø–æ–ª—è–º–∏ ExchangeLimit

        async with SessionLocal() as session:
            # 1) –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ limits/filters (—è–∫—â–æ –≤–æ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ ExchangeLimit)
            await session.execute(
                delete(ExchangeLimit).where(ExchangeLimit.exchange_id == exchange_id)
            )

            # 2) –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ (—è–∫—â–æ —î)
            if filters_data:
                session.add_all([ExchangeLimit(**f) for f in filters_data])

            # 3) –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ last_filters_refresh_at –≤ —Ç–∞–±–ª–∏—Ü—ñ exchanges
            await session.execute(
                update(Exchange)
                .where(Exchange.id == exchange_id)
                .values(last_filters_refresh_at=func.now())
            )

            # 4) –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å —É —ñ—Å—Ç–æ—Ä—ñ—é
            session.add(ExchangeStatusHistory(
                exchange_id=exchange_id,
                event="filters_refresh",
                status="ok",
                message=f"{len(filters_data)} filters –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
            ))

            await session.commit()

        logging.info(f"‚úÖ [DONE] filters –¥–ª—è {client['exchange_code']} –æ–Ω–æ–≤–ª–µ–Ω–æ")

    except Exception as e:
        logging.exception(f"‚ùå refresh_filters error for {client['exchange_code']}: {e}")
        async with SessionLocal() as session:
            session.add(ExchangeStatusHistory(
                exchange_id=exchange_id,
                event="filters_refresh",
                status="error",
                message=str(e)
            ))
            await session.commit()


# ---------------------------
# refresh_limits
# ---------------------------
async def refresh_limits(client, exchange_id):
    logging.info(f"üîÑ [START] refresh_limits for {client['exchange_code']}")

    try:
        # TODO: –≤–∏—Ç—è–≥—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ limits –∑ API
        limits_data = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –ø–æ–ª—è–º–∏ ExchangeLimit

        async with SessionLocal() as session:
            # 1) –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
            await session.execute(
                delete(ExchangeLimit).where(ExchangeLimit.exchange_id == exchange_id)
            )

            # 2) –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ
            if limits_data:
                session.add_all([ExchangeLimit(**l) for l in limits_data])

            # 3) –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ last_limits_refresh_at –≤ —Ç–∞–±–ª–∏—Ü—ñ exchanges
            await session.execute(
                update(Exchange)
                .where(Exchange.id == exchange_id)
                .values(last_limits_refresh_at=func.now())
            )

            # 4) –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å —É —ñ—Å—Ç–æ—Ä—ñ—é
            session.add(ExchangeStatusHistory(
                exchange_id=exchange_id,
                event="limits_refresh",
                status="ok",
                message=f"{len(limits_data)} limits –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
            ))

            await session.commit()

        logging.info(f"‚úÖ [DONE] limits –¥–ª—è {client['exchange_code']} –æ–Ω–æ–≤–ª–µ–Ω–æ")

    except Exception as e:
        logging.exception(f"‚ùå refresh_limits error for {client['exchange_code']}: {e}")
        async with SessionLocal() as session:
            session.add(ExchangeStatusHistory(
                exchange_id=exchange_id,
                event="limits_refresh",
                status="error",
                message=str(e)
            ))
            await session.commit()