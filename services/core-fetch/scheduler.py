import asyncio
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select
from core_fetch.db.session import SessionLocal
from core_fetch.db.models import Exchange
from core_fetch.services.clients import get_exchange_client
from core_fetch.services import universal_fetcher


async def load_jobs(scheduler: AsyncIOScheduler):
    logging.info("üöÄ –ü–æ—á–∏–Ω–∞—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è jobs")

    async with SessionLocal() as session:
        res = await session.execute(select(Exchange))
        exchanges = res.scalars().all()

        logging.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(exchanges)} –±—ñ—Ä–∂ —É —Ç–∞–±–ª–∏—Ü—ñ exchanges")

        for ex in exchanges:
            logging.info(f"‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –±—ñ—Ä–∂—ñ {ex.code} ({ex.name})")

            client = await get_exchange_client(session, ex)
            if not client:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {ex.code}, –Ω–µ–º–∞—î –∫–ª—ñ—î–Ω—Ç–∞")
                continue

            module = universal_fetcher

            # ---- symbols ----
            if hasattr(module, "refresh_symbols"):
                scheduler.add_job(
                    module.refresh_symbols,
                    "interval",
                    minutes=ex.fetch_symbols_interval_min,
                    args=[client, ex.id],
                    id=f"symbols_{ex.code}_{ex.id}",
                    replace_existing=True,
                )
                logging.info(
                    f"üïë –î–æ–¥–∞–≤ job symbols –¥–ª—è {ex.code} "
                    f"(–∫–æ–∂–Ω—ñ {ex.fetch_symbols_interval_min} —Ö–≤)"
                )

            # ---- limits ----
            if hasattr(module, "refresh_limits"):
                scheduler.add_job(
                    module.refresh_limits,
                    "interval",
                    minutes=ex.fetch_limits_interval_min,
                    args=[client, ex.id],
                    id=f"limits_{ex.code}_{ex.id}",
                    replace_existing=True,
                )
                logging.info(
                    f"üïë –î–æ–¥–∞–≤ job limits –¥–ª—è {ex.code} "
                    f"(–∫–æ–∂–Ω—ñ {ex.fetch_limits_interval_min} —Ö–≤)"
                )

    logging.info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è jobs –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def start_scheduler():
    logging.info("üü¢ –°—Ç–∞—Ä—Ç—É—é AsyncIOScheduler")
    scheduler = AsyncIOScheduler()
    loop = asyncio.get_event_loop()
    loop.create_task(load_jobs(scheduler))
    scheduler.start()
    logging.info("‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω–æ")
    loop.run_forever()
